version: "3.4"

services:
#######################################################
#  Sql Server
#######################################################
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver-db
    environment:
        SA_PASSWORD: "SqlServer2019!"
        ACCEPT_EULA: "Y"
        MSSQL_PID: "Developer"
    ports:
      - "1433:1433"
    networks:
      - saleproduct_network

#######################################################
#  Mongo
#######################################################
  mongodb:
    image: mongo
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: LoggerActivity
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - saleproduct_network

#######################################################
#  Mongo Client
#######################################################
  mongo-express:
    image: mongo-express
    container_name: mongoexpress-client 
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongodb:27017/"
    depends_on:
      - mongodb
    links:
      - mongodb:mongodb
    networks:
      - saleproduct_network


#######################################################
#  Zookeeper
#######################################################
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    networks:
        - kafka_network
    ports:
        - "2181:2181"
    environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

#######################################################
#  Kafka
#######################################################
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    container_name: kafka
    depends_on:
        - zookeeper
    networks:
        - kafka_network
    ports:
        - "9092:9092"
    environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ADVERTISED_HOST_NAME: kafka
        KAFKA_ADVERTISED_HOSTNAME: 127.0.0.1

  init-kafka:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
        - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
        - kafka_network 
    command: |
        "
        # blocks until kafka is reachable
        kafka-topics --bootstrap-server kafka:29092 --list

        echo -e 'Creating kafka topics'
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic salesProductOrderEvent --replication-factor 1 --partitions 1

        echo -e 'Successfully created the following topics:'
        kafka-topics --bootstrap-server kafka:29092 --list
        "

#######################################################
#  Avro Schema Registry
#######################################################
  schema_registry:
    image: confluentinc/cp-schema-registry:7.0.1
    container_name: schema_registry
    hostname: schema_registry
    ports:
        - 8185:8181
        - 8085:8081
    depends_on:
        - zookeeper
    networks:
        - kafka_network
    environment:
        SCHEMA_REGISTRY_HOST_NAME: schema_registry
        SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
        SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
        SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
        SCHEMA_LOG4J_ROOT_LOGLEVEL: 'ERROR'
        SCHEMA_TOOLS_LOG4J_LOGLEVEL: 'ERROR'

  kafka_rest:
    image: confluentinc/cp-kafka-rest:7.0.1
    hostname: kafka_rest
    ports:
        - "8082:8082"
    depends_on:
        - schema_registry
    networks:
        - kafka_network
    environment:
        KAFKA_REST_BOOTSTRAP_SERVERS: kafka:29092
        KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema_registry:8081
        KAFKA_REST_HOST_NAME: kafka_rest
        KAFKA_REST_LISTENERS: http://0.0.0.0:8082

  kafka_topics_ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    ports:
        - "8080:8080"
    environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
        - kafka_network
    depends_on:
        - kafka_rest     



volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  mongodb_data_container:
    driver: local
   
networks:
    saleproduct_network:
      driver: bridge
    kafka_network:
        driver: bridge
